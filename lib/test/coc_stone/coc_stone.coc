import time;

class Record
{
    var PtrComp     Record,
        Discr       int,
        EnumComp    int,
        IntComp     int,
        StringComp  String,
    ;

    func assign(other Record)
    {
        this.PtrComp    = other.PtrComp;
        this.Discr      = other.Discr;
        this.EnumComp   = other.EnumComp;
        this.IntComp    = other.IntComp;
        this.StringComp = other.StringComp;
    }
}

var loops = 50000000;

var Ident1 = 1,
    Ident2 = 2,
    Ident3 = 3,
    Ident4 = 4,
    Ident5 = 5,
;

var IntGlob     = 0,
    BoolGlob    = false,
    Char1Glob   = '\0',
    Char2Glob   = '\0',
;

var Array1Glob  = []int{51: 0},
    Array2Glob  = map(Range(0, 51), func (i int) (ret []int) {
        ret = []int{51: 0};
    }),
;

var PtrGlb      Record,
    PtrGlbNext  Record,
;

func Func3(EnumParIn int) (ret bool)
{
    var EnumLoc = EnumParIn;
    ret = EnumLoc == Ident3;
}

func Func2(StrParI1 String, StrParI2 String) (ret bool)
{
    var IntLoc = 1,
        CharLoc = '\0',
    ;
    while (IntLoc <= 1)
    {
        if (Func1(StrParI1.char_at(IntLoc), StrParI2.char_at(IntLoc + 1)) == Ident1)
        {
            CharLoc = 'A';
            ++ IntLoc;
        }
    }
    if (CharLoc >= 'W' && CharLoc <= 'Z')
    {
        IntLoc = 7;
    }
    if (CharLoc == 'X')
    {
        ret = true;
        return;
    }
    if (StrParI1.cmp(StrParI2) > 0)
    {
        IntLoc += 7;
        ret = true;
        return;
    }
}

func Func1(CharPar1 uint8, CharPar2 uint8) (ret int)
{
    var CharLoc1 = CharPar1,
        CharLoc2 = CharLoc1,
    ;
    ret = Ident1 if CharLoc2 != CharPar2 else Ident2;
}

func Proc8(Array1Par []int, Array2Par [][]int, IntParI1 int, IntParI2 int)
{
    var IntLoc = IntParI1 + 5;
    Array1Par[IntLoc] = IntParI2;
    Array1Par[IntLoc + 1] = Array1Par[IntLoc];
    Array1Par[IntLoc + 30] = IntLoc;
    for (var IntIndex: Range(IntLoc, IntLoc + 2))
    {
        Array2Par[IntLoc][IntIndex] = IntLoc;
    }
    ++ Array2Par[IntLoc][IntLoc - 1];
    Array2Par[IntLoc + 20][IntLoc] = Array1Par[IntLoc];
    IntGlob = 5;
}

func Proc7(int IntParI1, int IntParI2) (ret int)
{
    var IntLoc      = IntParI1 + 2,
        IntParOut   = IntParI2 + IntLoc,
    ;
    ret = IntParOut;
}

func Proc6(int EnumParIn) (ret int)
{
    var EnumParOut = EnumParIn;
    if (!Func3(EnumParIn))
    {
        EnumParOut = Ident4;
    }
    if (EnumParIn == Ident1)
    {
        EnumParOut = Ident1;
    }
    else if (EnumParIn == Ident2)
    {
        EnumParOut = Ident1 if IntGlob > 100 else Ident4;
    }
    else if (EnumParIn == Ident3)
    {
        EnumParOut = Ident2;
    }
    else if (EnumParIn == Ident4)
    {
    }
    else if (EnumParIn == Ident5)
    {
        EnumParOut = Ident3;
    }
    ret = EnumParOut;
}

func Proc5()
{
    Char1Glob   = 'A';
    BoolGlob    = false;
}

func Proc4()
{
    var BoolLoc = Char1Glob == 'A';
    BoolLoc = BoolLoc || BoolGlob;
    Char2Glob = 'B';
}

func Proc3(PtrParOut Record) (ret Record)
{
    if (PtrGlb !== nil)
    {
        PtrParOut = PtrGlb.PtrComp;
    }
    else
    {
        IntGlob = 100;
    }
    PtrGlb.IntComp = Proc7(10, IntGlob);
    ret = PtrParOut;
}

func Proc2(IntParIO int) (ret int)
{
    var IntLoc  = IntParIO + 10,
        EnumLoc = 0,
    ;
    while (true)
    {
        if (Char1Glob == 'A')
        {
            -- IntLoc;
            IntParIO = IntLoc - IntGlob;
            EnumLoc = Ident1;
        }
        if (EnumLoc == Ident1)
        {
            break;
        }
    }
    return IntParIO;
}

func Proc1(PtrParIn Record) (ret Record)
{
    var NextRecord = PtrParIn.PtrComp;
    NextRecord.assign(PtrGlb);
    PtrParIn.IntComp    = 5;
    NextRecord.IntComp  = PtrParIn.IntComp;
    NextRecord.PtrComp  = PtrParIn.PtrComp;
    NextRecord.PtrComp  = Proc3(NextRecord.PtrComp);
    if (NextRecord.Discr == Ident1)
    {
        NextRecord.IntComp  = 6;
        NextRecord.EnumComp = Proc6(PtrParIn.EnumComp);
        NextRecord.PtrComp  = PtrGlb.PtrComp;
        NextRecord.IntComp  = Proc7(NextRecord.IntComp, 10);
    }
    else
    {
        PtrParIn.assign(NextRecord);
    }
    ret = PtrParIn;
}

func Proc0()
{
    PtrGlbNext  = new Record();
    PtrGlb      = new Record();

    PtrGlb.PtrComp      = PtrGlbNext;
    PtrGlb.Discr        = Ident1;
    PtrGlb.EnumComp     = Ident3;
    PtrGlb.IntComp      = 40;
    PtrGlb.StringComp   = "DHRYSTONE PROGRAM, SOME STRING";

    String String1Loc = "DHRYSTONE PROGRAM, 1'ST STRING";
    Array2Glob[8][7] = 10;

    for (var i: Range(0, loops))
    {
        Proc5();
        Proc4();
        var IntLoc1 = 2,
            IntLoc2 = 3,
            EnumLoc = Ident2,
        ;
        String String2Loc = "DHRYSTONE PROGRAM, 2'ND STRING";
        BoolGlob = !Func2(String1Loc, String2Loc);
        var IntLoc3 = 0;
        while (IntLoc1 < IntLoc2)
        {
            IntLoc3 = 5 * IntLoc1 - IntLoc2;
            IntLoc3 = Proc7(IntLoc1, IntLoc2);
            ++ IntLoc1;
        }
        Proc8(Array1Glob, Array2Glob, IntLoc1, IntLoc3);
        PtrGlb = Proc1(PtrGlb);
        for (var CharIndex: Range('A', Char2Glob + '\x01'))
        {
            if (EnumLoc == Func1(CharIndex, 'C'))
            {
                EnumLoc = Proc6(Ident1);
            }
        }
        IntLoc3 = IntLoc2 * IntLoc1;
        IntLoc2 = IntLoc3 / IntLoc1;
        IntLoc2 = 7 * (IntLoc3 - IntLoc2) - IntLoc1;
        IntLoc1 = Proc2(IntLoc1);
    }
}

public func main()
{
    var ts = time.now_flt();
    Proc0();
    var tm = time.now_flt() - ts;
    println("Time used: %f sec".(tm));
    println("This machine benchmarks at %f LarStones/second".(cast<flt>(loops) / tm));
}
