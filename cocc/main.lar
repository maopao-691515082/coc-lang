import
    os,
    util,
    util/iters,
    time,
;
from . import
    util:   cocc_util,
    mod:    cocc_mod,
    out:    cocc_out,
    token:  cocc_token,
;

public void main()
{
    defer handle_exc([]{
        public void handle(Catched<cocc_util.ExitSignal> c)
        {
            //还是要尽量正常执行所有defer，所以不能在抛ExitSignal的地方直接exit
            os.exit(1);
        }
    });

    //解析命令行
    util.HashMap<String, String> opt_map;
    var args = os.args.parse("v", new String[]{"coc_dir=", "usr_lib_dir="}, ref opt_map);

    //初始化内部日志
    if (opt_map.contains_key("-v"))
    {
        cocc_util.enable_vmode();
    }
    cocc_util.vlog("开始");

    //解析选项和参数
    cocc_util.assert(args.size() == 1);
    var main_mod_name   = args[0],
        coc_dir         = opt_map.get("--coc_dir");

    cocc_mod.set_lib_dirs("%s/lib".(coc_dir), opt_map.get("--usr_lib_dir"));
    cocc_out.set_out_dir("%s/tmp/out/%s".(coc_dir, main_mod_name));

    //检查主模块名
    var main_mod_name_parts = main_mod_name.split("/");
    if (main_mod_name_parts.size() == 0 || !iters.all(iters.map(main_mod_name_parts.iter(), []{
        public bool convert(String s)
        {
            return cocc_token.is_valid_name(s);
        }
    })))
    {
        cocc_util.exit("无效的主模块名‘%s’".(main_mod_name));
    }
    if (main_mod_name.eq("__builtins"))
    {
        cocc_util.exit("主模块不能是‘%s’".(main_mod_name));
    }

    //开始编译，采用多轮的模式

    var step_runner = []{
        void run(String step_name, Callable step)
        {
            var ts = time.time();
            step.call();
            cocc_util.vlog("步骤[%s]处理完毕，耗时%.2f秒".(time.time() - ts));
        }
    };

    step_runner.run("模块预处理", [-]{
        //预处理加载所有涉及的模块
        cocc_mod.precompile(main_mod_name);
    });

    step_runner.run("检查模块元素涉及的类型", [-]{
        cocc_util.exit("todo");
    });

    step_runner.run("检查模块初始化函数", [-]{
        cocc_util.exit("todo");
    });

    step_runner.run("检查主模块main函数", [-]{
        cocc_util.exit("todo");
        cocc_mod.check_main_func();
        //main_mod.check_main_func();
    });

    step_runner.run("编译所有模块", [-]{
        cocc_util.exit("todo");
    });

    step_runner.run("输出目标代码", [-]{
        cocc_util.exit("todo");
    });

    cocc_util.vlog("结束");
}
