import
    util,
;
from .. import
    util:   cocc_util,
;

Mod bltin_mod, main_mod;

util.HashMap<String, Mod> mod_map;

Mod new_mod(String mod_name)
{
    cocc_util.assert(!mod_map.contains_key(mod_name));
    var mod = new Mod(mod_name);
    mod_map.set(mod_name, mod);
    mod.precompile();
}

public void precompile(String main_mod_name)
{
    //先预处理内建模块和主模块
    bltin_mod = new_mod("__builtins");
    main_mod = new_mod(main_mod_name);

    //逐个预处理所有涉及到的模块
    var processing = new util.HashSet<String>(nil);
    processing.update(bltin_mod.iter_dep_mods());
    processing.update(main_mod.iter_dep_mods());
    while (processing.size() > 0)
    {
        var new_processing = new util.HashSet<String>(nil);
        foreach (var mn: processing.iter())
        {
            if (!mod_map.contains_key(mn))
            {
                var m = new_mod(mn);
                new_processing.update(m.iter_dep_mods());
            }
        }
        processing = new_processing;
    }
}

public void check_main_func()
{
    main_mod.check_main_func();
}

public Mod get_mod(String mod_name)
{
    return mod_map.get(mod_name);
}
