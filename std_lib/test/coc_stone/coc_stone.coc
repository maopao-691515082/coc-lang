import time;

enum Enum
{
    IDENT_0,
    IDENT_1,
    IDENT_2,
    IDENT_3,
    IDENT_4,
    IDENT_5,
}

class Record
{
    var ptr_comp    Record,
        discr       Enum,
        enum_comp   Enum,
        int_comp    int,
        str_comp    String,
    ;

    func assign(other Record)
    {
        this.ptr_comp   = other.ptr_comp;
        this.discr      = other.discr;
        this.enum_comp  = other.enum_comp;
        this.int_comp   = other.int_comp;
        this.str_comp   = other.str_comp;
    }
}

final var LOOPS = 50000000;

var int_glob    = 0,
    bool_glob   = false,
    char_glob_1 = '\0',
    char_glob_2 = '\0',
;

var array_glob_1    = Vector<int>(51),
    array_glob_2    Vector<Vector<int>>,
;

var ptr_glob        Record,
    ptr_glob_next   Record,
;

func __init()
{
    array_glob_2 = Vector<Vector<int>>(51);
    for (var i: Range(0, array_glob_2.size()))
    {
        array_glob_2.set(i, Vector<int>(51));
    }
}

func func_3(enum_par_in Enum) (ret bool)
{
    var enum_loc = enum_par_in;
    ret = enum_loc == IDENT_3;
}

func func_2(str_par_in_1 String, str_par_in_2 String) (ret bool)
{
    var int_loc     = 1,
        char_loc    = '\0',
    ;
    while (int_loc <= 1)
    {
        if (func_1(str_par_in_1.char_at(int_loc), str_par_in_2.char_at(int_loc + 1)) == IDENT_1)
        {
            char_loc = 'A';
            int_loc += 1;
        }
    }
    if (char_loc >= 'W' && char_loc <= 'Z')
    {
        int_loc = 7;
    }
    if (char_loc == 'X')
    {
        ret = true;
        return;
    }
    if (str_par_in_1.cmp(str_par_in_2) > 0)
    {
        int_loc += 7;
        ret = true;
        return;
    }
}

func func_1(char_par_1 uint8, char_par_2 uint8) (ret Enum)
{
    var char_loc_1  = char_par_1,
        char_loc_2  = char_loc_1,
    ;
    ret = IDENT_1 if char_loc_2 != char_par_2 else IDENT_2;
}

func proc_8(array_par_1 Vector<int>, array_par_2 Vector<Vector<int>>, int_par_in_1 int, int_par_in_2 int)
{
    var int_loc = int_par_in_1 + 5;
    array_par_1.set(int_loc, int_par_in_2);
    array_par_1.set(int_loc + 1, array_par_1.get(int_loc));
    array_par_1.set(int_loc + 30, int_loc);
    for (var int_idx: Range(int_loc, int_loc + 2))
    {
        array_par_2.get(int_loc).set(int_idx, int_loc);
    }
    var iter = array_par_2.get(int_loc).iter_of(int_loc - 1);
    iter.set(iter.get() + 1);
    array_par_2.get(int_loc + 20).set(int_loc, array_par_1.get(int_loc));
    int_glob = 5;
}

func proc_7(int_par_in_1 int, int_par_in_2 int) (ret int)
{
    var int_loc     = int_par_in_1 + 2,
        int_par_out = int_par_in_2 + int_loc,
    ;
    ret = int_par_out;
}

func proc_6(enum_par_in Enum) (ret Enum)
{
    var enum_par_out = enum_par_in;
    if (!func_3(enum_par_in))
    {
        enum_par_out = IDENT_4;
    }
    if (enum_par_in == IDENT_1)
    {
        enum_par_out = IDENT_1;
    }
    else if (enum_par_in == IDENT_2)
    {
        enum_par_out = IDENT_1 if int_glob > 100 else IDENT_4;
    }
    else if (enum_par_in == IDENT_3)
    {
        enum_par_out = IDENT_2;
    }
    else if (enum_par_in == IDENT_4)
    {
    }
    else if (enum_par_in == IDENT_5)
    {
        enum_par_out = IDENT_3;
    }
    ret = enum_par_out;
}

func proc_5()
{
    char_glob_1 = 'A';
    bool_glob   = false;
}

func proc_4()
{
    var bool_loc = char_glob_1 == 'A';
    bool_loc = bool_loc || bool_glob;
    char_glob_2 = 'B';
}

func proc_3(ptr_par_out Record) (ret Record)
{
    if (ptr_glob !== nil)
    {
        ptr_par_out = ptr_glob.ptr_comp;
    }
    else
    {
        int_glob = 100;
    }
    ptr_glob.int_comp = proc_7(10, int_glob);
    ret = ptr_par_out;
}

func proc_2(int_par_io int) (ret int)
{
    var int_loc     = int_par_io + 10,
        enum_loc    Enum,
    ;
    while (true)
    {
        if (char_glob_1 == 'A')
        {
            int_loc -= 1;
            int_par_io = int_loc - int_glob;
            enum_loc = IDENT_1;
        }
        if (enum_loc == IDENT_1)
        {
            break;
        }
    }
    ret = int_par_io;
}

func proc_1(ptr_par_in Record) (ret Record)
{
    var next_record = ptr_par_in.ptr_comp;
    next_record.assign(ptr_glob);
    ptr_par_in.int_comp     = 5;
    next_record.int_comp    = ptr_par_in.int_comp;
    next_record.ptr_comp    = ptr_par_in.ptr_comp;
    next_record.ptr_comp    = proc_3(next_record.ptr_comp);
    if (next_record.discr == IDENT_1)
    {
        next_record.int_comp    = 6;
        next_record.enum_comp   = proc_6(ptr_par_in.enum_comp);
        next_record.ptr_comp    = ptr_glob.ptr_comp;
        next_record.int_comp    = proc_7(next_record.int_comp, 10);
    }
    else
    {
        ptr_par_in.assign(next_record);
    }
    ret = ptr_par_in;
}

func proc_0()
{
    ptr_glob_next   = Record();
    ptr_glob        = Record();

    ptr_glob.ptr_comp   = ptr_glob_next;
    ptr_glob.discr      = IDENT_1;
    ptr_glob.enum_comp  = IDENT_3;
    ptr_glob.int_comp   = 40;
    ptr_glob.str_comp   = "DHRYSTONE PROGRAM, SOME STRING";

    var str_loc_1 = "DHRYSTONE PROGRAM, 1'ST STRING";
    array_glob_2.get(8).set(7, 10);

    for (var i: Range(0, LOOPS))
    {
        proc_5();
        proc_4();
        var int_loc_1   = 2,
            int_loc_2   = 3,
            enum_loc    = IDENT_2,
        ;
        var str_loc_2 = "DHRYSTONE PROGRAM, 2'ND STRING";
        bool_glob = !func_2(str_loc_1, str_loc_2);
        var int_loc_3 = 0;
        while (int_loc_1 < int_loc_2)
        {
            int_loc_3 = 5 * int_loc_1 - int_loc_2;
            int_loc_3 = proc_7(int_loc_1, int_loc_2);
            int_loc_1 += 1;
        }
        proc_8(array_glob_1, array_glob_2, int_loc_1, int_loc_3);
        ptr_glob = proc_1(ptr_glob);
        for (var char_idx: Range('A', char_glob_2 + cast<uint8>(1)))
        {
            if (enum_loc == func_1(char_idx, 'C'))
            {
                enum_loc = proc_6(IDENT_1);
            }
        }
        int_loc_3 = int_loc_2 * int_loc_1;
        int_loc_2 = int_loc_3 / int_loc_1;
        int_loc_2 = 7 * (int_loc_3 - int_loc_2) - int_loc_1;
        int_loc_1 = proc_2(int_loc_1);
    }
}

public func main()
{
    var ts = time.now_float();
    proc_0();
    var tm = time.now_float() - ts;
    println("Time used: %s sec".(tm));
    println("This machine benchmarks at %s LarStones/second".(cast<float>(LOOPS) / tm));
}
